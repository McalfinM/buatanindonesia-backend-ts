"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.container = void 0;
const routes_1 = __importDefault(require("./api/routes"));
const kafka_1 = __importDefault(require("./events/connectors/kafka"));
const dispatcher_1 = require("./events/consumers/dispatcher");
const dispatcher_2 = require("./events/producers/dispatcher");
const subscribers_1 = __importDefault(require("./events/subscribers"));
const types_1 = require("./types");
const event_dispatch_1 = require("event-dispatch");
const inversify_1 = require("inversify");
const baseRouter_1 = __importDefault(require("./api/routes/baseRouter"));
const user_1 = __importDefault(require("./repositories/user"));
const user_2 = __importDefault(require("./api/controllers/user"));
const user_3 = __importDefault(require("./services/user"));
const post_1 = __importDefault(require("./api/routes/post"));
const auth_1 = __importDefault(require("./api/routes/auth"));
const auth_2 = __importDefault(require("./api/controllers/auth"));
const post_2 = __importDefault(require("./repositories/post"));
const post_3 = __importDefault(require("./services/post"));
const post_4 = __importDefault(require("./api/controllers/post"));
const profile_1 = __importDefault(require("./repositories/profile"));
const profile_2 = __importDefault(require("./services/profile"));
const profile_3 = __importDefault(require("./api/controllers/profile"));
const profile_4 = __importDefault(require("./api/routes/profile"));
const comment_1 = __importDefault(require("./api/routes/comment"));
const comment_2 = __importDefault(require("./api/controllers/comment"));
const comment_3 = __importDefault(require("./services/comment"));
const comment_4 = __importDefault(require("./repositories/comment"));
const like_1 = __importDefault(require("./api/routes/like"));
const like_2 = __importDefault(require("./api/controllers/like"));
const like_3 = __importDefault(require("./services/like"));
const like_4 = __importDefault(require("./repositories/like"));
const categories_1 = __importDefault(require("./api/controllers/categories"));
const categories_2 = __importDefault(require("./api/routes/categories"));
const categories_3 = __importDefault(require("./repositories/categories"));
const categories_4 = __importDefault(require("./services/categories"));
const remasLike_1 = __importDefault(require("./api/routes/remasLike"));
const remasLike_2 = __importDefault(require("./api/controllers/remasLike"));
const remasLike_3 = __importDefault(require("./services/remasLike"));
const remasLike_4 = __importDefault(require("./repositories/remasLike"));
const commentRemas_1 = __importDefault(require("./api/routes/commentRemas"));
const commentRemas_2 = __importDefault(require("./api/controllers/commentRemas"));
const commentRemas_3 = __importDefault(require("./services/commentRemas"));
const commentRemas_4 = __importDefault(require("./repositories/commentRemas"));
const registrationMemberRemasRouter_1 = __importDefault(require("./api/routes/registrationMemberRemasRouter"));
const registrationMemberRemas_1 = __importDefault(require("./repositories/registrationMemberRemas"));
const registrationMemberRemas_2 = __importDefault(require("./services/registrationMemberRemas"));
const registrationMembeREmasController_1 = __importDefault(require("./api/controllers/registrationMembeREmasController"));
inversify_1.decorate(inversify_1.injectable(), baseRouter_1.default);
inversify_1.decorate(inversify_1.injectable(), event_dispatch_1.EventDispatcher);
const container = new inversify_1.Container();
exports.container = container;
container.bind(types_1.TYPES.Subscribers).to(subscribers_1.default).inSingletonScope();
container.bind(types_1.TYPES.Connector).to(kafka_1.default).inSingletonScope();
container.bind(types_1.TYPES.IndexRouter).to(routes_1.default).inSingletonScope();
container.bind(types_1.TYPES.AuthRouter).to(auth_1.default).inSingletonScope();
container.bind(types_1.TYPES.AuthController).to(auth_2.default).inSingletonScope();
container.bind(types_1.TYPES.UserRouter).to(post_1.default).inSingletonScope();
container.bind(types_1.TYPES.UserController).to(user_2.default).inSingletonScope();
container.bind(types_1.TYPES.UserService).to(user_3.default).inSingletonScope();
container.bind(types_1.TYPES.UserRepository).to(user_1.default).inSingletonScope();
container.bind(types_1.TYPES.PostRouter).to(post_1.default).inSingletonScope();
container.bind(types_1.TYPES.PostController).to(post_4.default).inSingletonScope();
container.bind(types_1.TYPES.PostService).to(post_3.default).inSingletonScope();
container.bind(types_1.TYPES.PostRepository).to(post_2.default).inSingletonScope();
container.bind(types_1.TYPES.ProfileRouter).to(profile_4.default).inSingletonScope();
container.bind(types_1.TYPES.ProfileController).to(profile_3.default).inSingletonScope();
container.bind(types_1.TYPES.ProfileService).to(profile_2.default).inSingletonScope();
container.bind(types_1.TYPES.ProfileRepository).to(profile_1.default).inSingletonScope();
container.bind(types_1.TYPES.CommentRouter).to(comment_1.default).inSingletonScope();
container.bind(types_1.TYPES.CommentController).to(comment_2.default).inSingletonScope();
container.bind(types_1.TYPES.CommentService).to(comment_3.default).inSingletonScope();
container.bind(types_1.TYPES.CommentRepository).to(comment_4.default).inSingletonScope();
container.bind(types_1.TYPES.LikeRouter).to(like_1.default).inSingletonScope();
container.bind(types_1.TYPES.LikeController).to(like_2.default).inSingletonScope();
container.bind(types_1.TYPES.LikeService).to(like_3.default).inSingletonScope();
container.bind(types_1.TYPES.LikeRepository).to(like_4.default).inSingletonScope();
container.bind(types_1.TYPES.CategoryRouter).to(categories_2.default).inSingletonScope();
container.bind(types_1.TYPES.CategoryController).to(categories_1.default).inSingletonScope();
container.bind(types_1.TYPES.CategoryService).to(categories_4.default).inSingletonScope();
container.bind(types_1.TYPES.CategoryRepository).to(categories_3.default).inSingletonScope();
container.bind(types_1.TYPES.RemasLikeRouter).to(remasLike_1.default).inSingletonScope();
container.bind(types_1.TYPES.RemasLikeController).to(remasLike_2.default).inSingletonScope();
container.bind(types_1.TYPES.RemasLikeService).to(remasLike_3.default).inSingletonScope();
container.bind(types_1.TYPES.RemasLikeRepository).to(remasLike_4.default).inSingletonScope();
container.bind(types_1.TYPES.CommentRemasRouter).to(commentRemas_1.default).inSingletonScope();
container.bind(types_1.TYPES.CommentRemasController).to(commentRemas_2.default).inSingletonScope();
container.bind(types_1.TYPES.CommentRemasService).to(commentRemas_3.default).inSingletonScope();
container.bind(types_1.TYPES.CommentRemasRepository).to(commentRemas_4.default).inSingletonScope();
container.bind(types_1.TYPES.RegistrationMemberRemasRouter).to(registrationMemberRemasRouter_1.default).inSingletonScope();
container.bind(types_1.TYPES.RegistrationMemberRemasController).to(registrationMembeREmasController_1.default).inSingletonScope();
container.bind(types_1.TYPES.RegistrationMemberRemasService).to(registrationMemberRemas_2.default).inSingletonScope();
container.bind(types_1.TYPES.RegistrationMemberRemasRepository).to(registrationMemberRemas_1.default).inSingletonScope();
container.bind(types_1.TYPES.ProducerDispatcher).to(dispatcher_2.ProducerDispatcher).inSingletonScope();
container.bind(types_1.TYPES.ConsumerDispatcher).to(dispatcher_1.ConsumerDispatcher).inSingletonScope();
